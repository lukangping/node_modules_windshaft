{
  "author": {
    "name": "Nathan Rugg",
    "email": "nmrugg@gmail.com"
  },
  "name": "lzma",
  "description": "A standalone JavaScript implementation of the Lempel-Ziv-Markov chain (LZMA) compression algorithm",
  "version": "1.2.3",
  "homepage": "https://github.com/nmrugg/LZMA-JS",
  "repository": {
    "type": "git",
    "url": "git://github.com/nmrugg/LZMA-JS.git"
  },
  "main": "lzma.js",
  "readme": "LZMA in a Browser\n===\n\n[LZMA.JS](https://github.com/nmrugg/LZMA-JS) is a JavaScript implementation of the Lempel-Ziv-Markov chain (LZMA) compression algorithm.\nThe JavaScript, CSS, and HTML is licensed under the MIT license.  See LICENSE for more details.\n\nIt is based on [gwt-lzma](http://code.google.com/p/gwt-lzma/), which is a port of the LZMA SDK from\nJava into JavaScript.  The original Java code is licensed under the Apache License 2.0 license.\n\nDemos\n---\n\nLive demos can be found [here](http://nmrugg.github.com/LZMA-JS/ \"Demos\").\n\nHow to Use\n---\n\nFirst, load the bootstrapping code.\n    \n    /// In a browser:\n    <script src=\"../src/lzma.js\"></script>\n\n    /// In node:\n    var LZMA = require(\"../src/lzma.js\").LZMA;\n\nCreate the LZMA object.\n    \n    /// LZMA([optional path])\n    /// If lzma_worker.js is in the same directory, you don't need to set the path.\n    /// You should be able to do the first two steps simultaneously in Node.js: var my_lzma = require(\"../src/lzma.js\").LZMA();\n    var my_lzma = new LZMA(\"../src/lzma_worker.js\");\n\n(De)Compress stuff.\n\n    /// To compress:\n    ///NOTE: mode can be 1-9 (1 is fast but not as good; 9 will probably make your browser crash).\n    my_lzma.compress(string, mode, on_finish(result) {}, on_progress(percent) {});\n    \n    /// To decompress:\n    my_lzma.decompress(byte_array, on_finish(result) {}, on_progress(percent) {});\n\nNode.js Installation\n---\n\nLZMA.JS is available in the npm repository.  If you have [npm](https://github.com/isaacs/npm) installed, you can install it by running\n    \n    $ npm install lzma\n\nand load it with the following code:\n    \n    var my_lzma = require(\"lzma\").LZMA();\n    \n\nNotes\n---\n\nThe calls to compress() and decompress() are asynchronous, so you need to supply a callback function if you\nwant to use the (de)compressed data.  There was a synchronous version, which you can find in\n[the archives](https://github.com/nmrugg/LZMA-JS/archives/ef453c278e5087de68b869b2f0d023a0ff922aa2),\nbut it is no longer maintained.\n\nLZMA.JS will use [web workers](http://www.whatwg.org/specs/web-workers/current-work/) if they are available.  If the\nenvironment does not support web workers, it will create a few global functions (Worker(), onmessage(), and\npostMessage()) to mimic the functionality.\n\nBut I don't want to use Web Workers\n---\n\nIf you'd prefer not to bother with Web Workers, you can just include <code>lzma_worker.js</code> directly. For example:\n\n    <script src=\"../src/lzma_worker.js\"></script>\n\nThat will create a global <code>LZMA</code> <code>object</code> that you can use directly. Like this:\n\n    LZMA.compress(string, mode, on_finish(result) {}, on_progress(percent) {});\n    \n    LZMA.decompress(byte_array, on_finish(result) {}, on_progress(percent) {});\n\nNote that this <code>LZMA</code> variable is an <code>object</code>, not a <code>function</code>.\n\nThis can also be done in Node.js.\n\n    /// Note that there are no parentheses after \".LZMA\" because this LZMA variable is an object, not a function.\n    var my_lzma = require(\"lzma/lzma_worker.js\").LZMA;\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/nmrugg/LZMA-JS/issues"
  },
  "_id": "lzma@1.2.3",
  "_from": "lzma@1.2.3"
}
