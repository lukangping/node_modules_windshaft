{
  "name": "windshaft",
  "version": "0.13.4",
  "main": "./lib/windshaft/index.js",
  "description": "A Node.js based map tile server for PostGIS & Mapnik",
  "url": "https://github.com/Vizzuality/Windshaft",
  "licenses": [
    {
      "type": "BSD",
      "url": "https://github.com/Vizzuality/Windshaft/blob/master/LICENCE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Vizzuality/Windshaft.git"
  },
  "author": {
    "name": "Vizzuality",
    "email": "contact@vizzuality.com",
    "url": "http://vizzuality.com"
  },
  "contributors": [
    {
      "name": "Simon Tokumine",
      "email": "simon@vizzuality.com"
    },
    {
      "name": "Javi Santana",
      "email": "jsantana@vizzuality.com"
    },
    {
      "name": "Sandro Santilli",
      "email": "strk@vizzuality.com"
    }
  ],
  "dependencies": {
    "underscore": "~1.3",
    "step": "~0.0.5",
    "grainstore": "~0.13.8",
    "generic-pool": "~2.0.3",
    "express": "~2.5.11",
    "tilelive": "~4.4.2",
    "tilelive-mapnik": "git://github.com/Vizzuality/tilelive-mapnik.git#5908346",
    "mapnik": "~0.7.17",
    "lru-cache": "~2.3.0"
  },
  "devDependencies": {
    "mocha": "~1.2.1",
    "semver": "~1.1.0",
    "redis": "~0.8.3"
  },
  "scripts": {
    "test": "sh ./run_tests.sh ${RUNTESTFLAGS} test/unit/*.js test/acceptance/*.js"
  },
  "engine": {
    "node": ">= 0.6 < 0.9"
  },
  "readme": "Windshaft map tiler\n===================\n\n[![Build Status](https://travis-ci.org/CartoDB/Windshaft.png)](http://travis-ci.org/CartoDB/Windshaft)\n\nA Node.js based webmercator map tile server for PostGIS with Carto map\nstyling API.\n\n* Pluggable routing to provide customizable tile API URL endpoints\n* Before and after filters to allow custom access control and caching\n  strategies\n* Can render arbitrary SQL queries \n* Generates image and UTFGrid interactivity tiles\n* Accepts, stores, serves, and applies map styles written in the Carto\n  markup language (same markup as Mapbox Tilemill)\n* Accepts custom map styles on a per tile basis in the tile request\n* Allows setting of CORS headers to allow access to tile data from\n  Javascript\n\n![Puma Concolor by @eightysteele] (\nhttp://github.com/Vizzuality/Windshaft/raw/master/examples/puma_concolor.png\n)\n\nBeing a dynamic map renderer, windshaft commits some map server 'sins' in\nits raw form. The idea is that you the developer will want to graft your\nown auth/metrics/caching/scaling on top of decent core components. Same\nold story: high cohesion, low coupling makes us happy.\n\nWindshaft is a library used by cartodb.com,\nan Open Source Geospatial Database on the Cloud.\n\nDependencies\n------------\n* Node 0.6+ & npm 1.1.2+ (for shrinkwrap support)\n* Mapnik 2.0.1, 2.0.2 or 2.1.0 (http://github.com/mapnik/mapnik-reference)\n* PostgreSQL >8.3.x, PostGIS >1.5.x\n* Redis >2.2.x\n\n\nInstall\n-------\n```\nnpm install\n```\n\n\nUsage\n-----\n```javascript\n\nvar Windshaft = require('windshaft');\n\n// Configure pluggable URLs\n// =========================\n// The config object must define grainstore config (generally just\n// postgres connection details), redis config, a base url and a function\n// that adds 'dbname' and 'table' variables onto the Express.js req.params\n// object.  In this example, the base URL is such that dbname and table will\n// automatically be added to the req.params object by express.js. req2params\n// can be extended to allow full control over the specifying of dbname and\n// table, and also allows for the req.params object to be extended with\n// other variables, such as:\n//\n// * sql - custom sql query to narrow results shown in map)\n// * geom_type - specify the geom type (point|polygon) to get more\n//               appropriate default styles\n// * cache_buster - forces the creation of a new render object, nullifying\n//                  existing metatile caches\n// * interactivity - specify the column to use in the UTFGrid\n//                   interactivity layer (defaults to null)\n// * style - specify map style in the Carto map language on a per tile basis\n//\n// the base url is also used for persisiting and retrieving map styles via:\n//\n// GET  base_url + '/style' (returns a map style)\n// POST base_url + '/style' (allows specifying of a style in Carto markup\n//                           in the 'style' form variable).\n//\n// beforeTileRender and afterTileRender could be defined if you want yo\n// implement your own tile cache policy. See an example below\n\nvar config = {\n        base_url: '/database/:dbname/table/:table',\n        req2params: function(req, callback){\n          callback(null,req)\n        },\n        grainstore: {\n          datasource: {\n            user:'postgres', host: '127.0.0.1',\n        \t\tport: 5432\n          }\n        }, //see grainstore npm for other options\n        renderCache: {\n          ttl: 60000, // seconds\n        },\n        mapnik: {\n          metatile: 4,\n          bufferSize:64\n        },\n        redis: {host: '127.0.0.1', port: 6379},\n        // this two filters are optional\n        beforeTileRender: function(req, res, callback) {\n            callback(null);\n        },\n        afterTileRender: function(req, res, tile, headers, callback) {\n            callback(null, tile, headers);\n        }\n    };\n\n// Initialize tile server on port 4000\nvar ws = new Windshaft.Server(config);\nws.listen(4000);\nconsole.log(\"map tiles are now being served out of: http://localhost:4000\"\n            + config.base_url + '/:z/:x/:y.*');\n\n// Specify .png, .png8 or .grid.json tiles.\n```\n\nSee examples directory for running server and maptile viewer\n\n\nInstalling Mapnik\n-----------------\n\n**Source**\nhttps://github.com/mapnik/mapnik/downloads\n\n**OSX**\n\nhttp://trac.mapnik.org/wiki/MacInstallation/Homebrew\n\n**Linux**\n\nThere should be .deb packages out there with stable 2.0.0 packages right now.\nSearch fro libmapnik2-dev\n\nTests\n-----\n\nWindshaft has a unit and acceptance test suite.\nTo execute them, run ```make check``` (or ```npm test```).\nIt is also possible for tests to recurse into some of\nthe submodules, that's done with ```make check-submodules```\n(or ```make check-full``` to run both)\n\nTroubleshooting\n---------------\n\n### Postgres errors persist after configuration change\n\nIf you're seeing Postgres errors that you can't dispel through changes in your\nWindshaft config (e.g. `ERROR: column \"the_geom_webmercator\" does not exist`),\ntry `redis-cli flushall`. Windshaft caches MML files in Redis than can contain SQL\nand may not expire them when you change your Windshaft config, but manually flushing \nredis should do the trick.\n\n--\nThanks to the Mapnik and Mapbox team for making such flexible tools\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Vizzuality/Windshaft/issues"
  },
  "homepage": "https://github.com/Vizzuality/Windshaft",
  "_id": "windshaft@0.13.4",
  "_from": "windshaft@0.13.4"
}
