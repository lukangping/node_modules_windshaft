{
  "name": "grainstore",
  "version": "0.13.8",
  "main": "./lib/grainstore/index.js",
  "description": "Stores map styles and generates postgis friendly MML & XML for Mapnik",
  "url": "https://github.com/Vizzuality/grainstore",
  "licenses": [
    {
      "type": "BSD",
      "url": "https://github.com/Vizzuality/grainstore/blob/master/LICENCE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Vizzuality/grainstore.git"
  },
  "author": {
    "name": "Vizzuality",
    "email": "contact@vizzuality.com",
    "url": "http://vizzuality.com"
  },
  "contributors": [
    {
      "name": "Simon Tokumine",
      "email": "si@tinypla.net"
    },
    {
      "name": "Sandro Santilli",
      "email": "strk@vizzuality.com"
    }
  ],
  "dependencies": {
    "underscore": "~1.3.3",
    "step": "~0.0.5",
    "semver": "~1.1.0",
    "generic-pool": "~2.0.3",
    "carto": "git://github.com/CartoDB/carto.git#cdb-0.9.3-cdb3",
    "mapnik-reference": "~5.0.4",
    "redis": "~0.8.3",
    "hiredis": "~0.1.14",
    "millstone": "git://github.com/CartoDB/millstone.git#cdb-0.6.0-cdb1"
  },
  "devDependencies": {
    "mocha": "~1.2.1",
    "libxmljs": "~0.5.4"
  },
  "scripts": {
    "test": "test/support/run_tests.sh ${RUNTESTFLAGS} test/*.js"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "Grainstore\n===========\n\n[![Build Status](https://travis-ci.org/Vizzuality/grainstore.png)](http://travis-ci.org/Vizzuality/grainstore)\n\nNeed to simply generate a Mapnik map from a dynamic PostGIS table?\n\nGrainstore is an opinionated [Carto](https://github.com/mapbox/carto)\nMML style store for PostGIS tables, views or sql queries that outputs\nMapnik XML stylesheets.\n\nMap styles can be defined in the [Carto](https://github.com/mapbox/carto)\nmap styling language or use default styles. The Carto styles are persisted\nand Mapnik XML output cached in Redis, making it a good choice for use\nin map tile servers.\n\nThe generated Mapnik XML stylesheet plugs directly into Mapnik or Mapnik\nbased tile server to render a map and interactivity layer.\n\nGrainstore is braindead simple:\n\n 1 db + 1 table/query + 1 style =  1 Mapnik XML stylesheet.\n\nor\n\n 1 db + N queries + N styles =  1 Mapnik XML stylesheet.\n\n\nTypical use\n-----------\n1. initialise grainstore with PostGIS DB and table name\n2. generate Mapnik XML for table with default styles\n3. set custom style with carto \n4. get carto errors returned if present, else store style\n5. generate Mapnik XML with custom style\n6. initialise with PostGIS DB, table name and sql query\n7. generate Mapnik XML with stored style for table name and sql query\n\nFor using multiple layers use an array type for the 'sql' parameter and\nfor the 'style' parameter. Each resulting layer will be named 'layerN'\nwith N starting from 0 (needed to  properly reference the layers from\nthe 'style' values).\n\nInstall\n--------\nnpm install\n\n\nDependencies\n------------\n* node.js (tested from 0.4.x to 0.8.x)\n* npm\n* Redis\n* libosr (or libgdal)\n\n\nAdditional test dependencies\n-----------------------------\n* libxml2 \n* libxml2-devel\n\n\nExamples\n---------\n\n```javascript\n\nvar GrainStore = require('grainstore');\n\n\n// fully default.\nvar mmls = new GrainStore.MMLStore();\nvar mmlb = mmls.mml_builder({dbname: 'my_database', table:'my_table'}, function(err, payload) {\n\tmmlb.toXML(function(err, data){\n\t  console.log(data); // => Mapnik XML for your database with default styles\n\t}); \n});\n\n\n// custom redis and pg settings.\nvar mmls = new GrainStore.MMLStore({host:'10.0.0.1'}); \n\nvar render_target = {\n  dbname: 'my_db', \n  table:'my_tb', \n  sql:'select * from my_tb where age < 100'\n}\n\n// see mml_store.js for more customisation detail \nvar mapnik_config = {\n  Map: {srid: 4326},\n  Datasource: {\n    user: \"postgres\",\n    geometry_field: \"my_geom\"\n  }   \n}\n\nmmlb = mmls.mml_builder(render_target, mapnik_config, function(err, payload) {\n\tmmlb.toXML(function(err, data){\n\t  console.log(data); // => Mapnik XML of custom database with default style\n\t}); \n});\n\n\n\n// custom styles.\nvar mmls = new GrainStore.MMLStore();\nvar mmlb = mmls.mml_builder({dbname: 'my_database', table:'my_table'},\nfunction(err, payload)\n{\n\tvar my_style = \"#my_table{marker-fill: #FF6600;}\"\n\n\tmmlb.setStyle(my_style, function(err, data){\n\t  if err throw err; // any Carto Compile errors\n\t  \n\t  mmlb.toMML(function(err, data){\n\t    console.log(data) // => Carto ready MML\n\t  }); \n\t  \n\t  mmlb.toXML(function(err, data){\n\t    console.log(data); // => Mapnik XML of database with custom style\n\t  }); \n\t  \n\t  mmlb.getStyle(function(err, data){\n\t    console.log(data); // => \"#my_table{marker-fill: #FF6600;}\"\n\t  });\n\t});\n});\n\n```\n\nFor more examples, see the tests.\n\n\nTests\n-----\nTo run the tests, from the project root:\n\n```\nnpm test\n```\n\n\nTODO\n-----\n* make storage pluggable\n\nto release: npm publish\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Vizzuality/grainstore/issues"
  },
  "homepage": "https://github.com/Vizzuality/grainstore",
  "_id": "grainstore@0.13.8",
  "_from": "grainstore@0.13.8"
}
